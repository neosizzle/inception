{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAnimations","temp","console","log","bubbleSortHelper","SortingVisualizer","props","state","sliderCoords","x","NUMBER_OF_ARRAY_BARS","ANIMATION_SPEED_MS","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","animationIndexCounter","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","sortingCompletedAnimation","maxValue","traversalHelper","getTraversalAnimations","animationIndex","forEach","animation","barIdx","newBarHeight","min","minIndex","selectionSortHelper","getSelectionSortAnimations","bubbleSortTwoHelper","getReversedBubbleSortAnimations","delayedAnimationSpeed","completedHelper","getCompletedAnimations","isColored","javaScriptSortedArray","sort","a","b","mergeSortedArray","arraysAreEqual","className","map","value","idx","key","Container","fluid","Row","Col","lg","md","sm","input","width","max","step","onChange","axis","xstep","xmin","xmax","Button","onClick","Dropdown","Toggle","variant","id","Menu","Item","mergeSort","selectionSort","bubbleSort","reverseBubbleSort","traversal","React","Component","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.327ebaa1.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nexport function getTraversalAnimations(array, maxValue) {\r\n  const animations = [];\r\n  traversalHelper(array, animations, maxValue)\r\n  return animations\r\n\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  let animations = []\r\n  if (array.length <= 1) return array\r\n  bubbleSortHelper(array, animations);\r\n  return animations\r\n}\r\n\r\nexport function getReversedBubbleSortAnimations(array) {\r\n  let animations = []\r\n  if (array.length <= 1) return array\r\n  bubbleSortTwoHelper(array, animations);\r\n  return animations\r\n}\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n  let animations = []\r\n  if (array.length <= 1) return array\r\n  selectionSortHelper(array, animations);\r\n  return animations\r\n}\r\n\r\nexport function getCompletedAnimations(array) {\r\n  const animations = [];\r\n  completedHelper(array, animations)\r\n  return animations\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nfunction traversalHelper(array, animations, maxValue) {\r\n\r\n\r\n  for (let i = 0; i < array.length; ++i) {\r\n    //first push\r\n    //i is the index need to be selected\r\n    animations.push([i, i])\r\n\r\n    //sec push\r\n    //i is the index which need to be disselected\r\n    animations.push([i, i])\r\n\r\n    //third push\r\n    //i is the index of the og array to be compared, 20 is the desired height to change\r\n    animations.push([i, maxValue])\r\n  }\r\n\r\n}\r\n\r\nfunction bubbleSortTwoHelper(array, animations) {\r\n\r\n  let temp = 0\r\n\r\n  for (let i = 0; i < array.length - 1; ++i) {\r\n    for (let j = i + 1; j < array.length; ++j) {\r\n\r\n      if (array[j] < array[i]) {\r\n        //first push\r\n        //i and j is the index need to be selected\r\n        animations.push([i, j])\r\n\r\n        //sec push\r\n        //i is the index which need to be disselected\r\n        animations.push([i, j])\r\n\r\n        temp = array[j];\r\n        array[j] = array[i];\r\n        array[i] = temp;\r\n\r\n        //third push \r\n        //i and j is the index which need to be overrided\r\n        animations.push([i, array[i]])\r\n        animations.push([j, array[j]])\r\n      }\r\n    }\r\n  }\r\n\r\n  return animations\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n\r\n  let temp = 0\r\n\r\n  for (let i = 0; i < array.length - 1; ++i) {\r\n    for (let j = 0; j < array.length - i - 1; ++j) {\r\n\r\n      if (array[j] > array[j + 1]) {\r\n        //first push\r\n        //i and j is the index need to be selected\r\n        animations.push([j, j + 1])\r\n\r\n        //sec push\r\n        //i is the index which need to be disselected\r\n        animations.push([j, j + 1])\r\n\r\n        temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n\r\n        //third push \r\n        //i and j is the index which need to be overrided\r\n        animations.push([j, array[j]])\r\n        animations.push([j + 1, array[j + 1]])\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(array)\r\n  return animations\r\n}\r\n\r\nfunction selectionSortHelper(array, animations) {\r\n  let min = array[0]\r\n  let minIndex = 0\r\n  let temp = 0;\r\n\r\n  for (let i = 0; i < array.length - 1; ++i) {\r\n\r\n    //find min and min index\r\n    for (let j = i + 1; j < array.length; ++j) {\r\n      if (array[j] < min) {\r\n        min = array[j];\r\n        minIndex = j;\r\n      }\r\n    }\r\n\r\n    //push to animations to select min and index i\r\n    animations.push([i, minIndex])\r\n\r\n    //push to animations to dissclect min and index i\r\n    animations.push([i, minIndex])\r\n\r\n    //push to animations to overwrite index i\r\n    animations.push([i, min])\r\n\r\n    //push to animations to overwrite min index\r\n    animations.push([minIndex, array[i]])\r\n\r\n    //swap min with i\r\n    temp = array[i]\r\n    array[i] = min;\r\n    array[minIndex] = temp;\r\n    min = array[i + 1]\r\n\r\n\r\n\r\n  }\r\n\r\n  return animations\r\n\r\n}\r\n\r\nfunction completedHelper(array, animations) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    //push to animation array once to select index\r\n    animations.push([i])\r\n    //push to animation array once to disselect index\r\n    animations.push([i])\r\n  }\r\n\r\n  return animations\r\n}","import React from 'react';\r\nimport { useState } from 'react-dom'\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Slider from 'react-input-slider';\r\nimport NumericInput from 'react-numeric-input';\r\n\r\n\r\nimport {\r\n  getBubbleSortAnimations,\r\n  getReversedBubbleSortAnimations,\r\n  getMergeSortAnimations,\r\n  getSelectionSortAnimations,\r\n  getTraversalAnimations,\r\n  getCompletedAnimations\r\n}\r\n  from '../sortingAlgorithms/sortingAlgorithms.js';\r\n\r\nimport './SortingVisualizer.css';\r\n\r\n// // Change this value for the speed of the animations.\r\n// const ANIMATION_SPEED_MS = 1;\r\n\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nconst DONE_COLOR = 'blue';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      sliderCoords: { x: 0.3 },\r\n      // Change this value for the number of bars (value) in the array.\r\n      NUMBER_OF_ARRAY_BARS: 50,\r\n      // Change this value for the speed of the animations.\r\n      ANIMATION_SPEED_MS: 5\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    let animationIndexCounter = 0\r\n    for (let i = animationIndexCounter; i < animations.length; animationIndexCounter++, i++) {\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n\r\n    this.sortingCompletedAnimation(animationIndexCounter * this.state.ANIMATION_SPEED_MS)\r\n\r\n\r\n  }\r\n\r\n  traversal() {\r\n\r\n    const animations = getTraversalAnimations(this.state.array, 500)\r\n\r\n    let animationIndex = 0;\r\n\r\n    //traverse through animations and display on the screen\r\n    animations.forEach(animation => {\r\n      //get arrays from DOM\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n      //if animation index % 3 != 2, which means its a colour change animation\r\n      const isColorChange = animationIndex % 3 !== 2;\r\n\r\n      if (isColorChange) {\r\n\r\n        //get the index for desired bars\r\n        const [barOneIdx, barTwoIdx] = animations[animationIndex];\r\n\r\n        //get styles for said bars\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //set the colour according to the index position (colour it red if its every 3 element and decolour it if its not)\r\n        const color = animationIndex % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n        //set colour of bars with an incrementing delay\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n\r\n        //switching animatopn with incrementing delay\r\n        setTimeout(() => {\r\n\r\n          //get desired index \r\n          const [barIdx, newBarHeight] = animation;\r\n\r\n          //get style from array DOM\r\n          const barOneStyle = arrayBars[barIdx].style;\r\n\r\n          //set new height\r\n          barOneStyle.height = `${newBarHeight}px`;\r\n\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n\r\n      //a variable that needs to increment for each settimeout so it can appear with delay every single animation\r\n      animationIndex++\r\n    });\r\n\r\n    this.sortingCompletedAnimation(animationIndex * this.state.ANIMATION_SPEED_MS)\r\n  }\r\n\r\n  selectionSort() {\r\n    const animations = getSelectionSortAnimations(this.state.array)\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    let isColorChange = false\r\n    let animationIndexCounter = 0\r\n\r\n\r\n    for (let animationIndex = animationIndexCounter; animationIndex < animations.length; ++animationIndex, ++animationIndexCounter) {\r\n      isColorChange = animationIndex % 4 <= 1;\r\n\r\n      //colour change animation\r\n      if (isColorChange) {\r\n        //get the index for desired bars\r\n        const [barOneIdx, barTwoIdx] = animations[animationIndex];\r\n\r\n        //get styles for said bars\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //set the colour according to the index position \r\n        const color = animationIndex % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n\r\n        //set colour of bars with an incrementing delay\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n      else {\r\n        //height change animation\r\n\r\n        //switching animatopn with incrementing delay\r\n        setTimeout(() => {\r\n\r\n          //get desired index \r\n          const [barIdx, newBarHeight] = animations[animationIndex];\r\n\r\n          //get style from array DOM\r\n          const barOneStyle = arrayBars[barIdx].style;\r\n\r\n          //set new height\r\n          barOneStyle.height = `${newBarHeight}px`;\r\n\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n\r\n\r\n\r\n      }\r\n\r\n    }\r\n\r\n    this.sortingCompletedAnimation(animationIndexCounter * this.state.ANIMATION_SPEED_MS)\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array)\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    let isColorChange = false\r\n    let animationIndexCounter = 0\r\n\r\n    for (let animationIndex = animationIndexCounter; animationIndex < animations.length; ++animationIndex, ++animationIndexCounter) {\r\n      isColorChange = animationIndex % 4 <= 1;\r\n\r\n      //colour change animation\r\n      if (isColorChange) {\r\n        //get the index for desired bars\r\n        const [barOneIdx, barTwoIdx] = animations[animationIndex];\r\n\r\n        //get styles for said bars\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //set the colour according to the index position \r\n        const color = animationIndex % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n\r\n        //set colour of bars with an incrementing delay\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n      else {\r\n        //height change animation\r\n\r\n        //switching animatopn with incrementing delay\r\n        setTimeout(() => {\r\n\r\n          //get desired index \r\n          const [barIdx, newBarHeight] = animations[animationIndex];\r\n\r\n          //get style from array DOM\r\n          const barOneStyle = arrayBars[barIdx].style;\r\n\r\n          //set new height\r\n          barOneStyle.height = `${newBarHeight}px`;\r\n\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n\r\n\r\n\r\n      }\r\n\r\n    }\r\n\r\n    this.sortingCompletedAnimation(animationIndexCounter * this.state.ANIMATION_SPEED_MS)\r\n\r\n  }\r\n\r\n  reverseBubbleSort() {\r\n    const animations = getReversedBubbleSortAnimations(this.state.array)\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    let isColorChange = false\r\n    let animationIndexCounter = 0;\r\n\r\n\r\n    for (let animationIndex = animationIndexCounter; animationIndex < animations.length; ++animationIndex, ++animationIndexCounter) {\r\n      isColorChange = animationIndex % 4 <= 1;\r\n\r\n      //colour change animation\r\n      if (isColorChange) {\r\n        //get the index for desired bars\r\n        const [barOneIdx, barTwoIdx] = animations[animationIndex];\r\n\r\n        //get styles for said bars\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        //set the colour according to the index position \r\n        const color = animationIndex % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n\r\n        //set colour of bars with an incrementing delay\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n      else {\r\n        //height change animation\r\n\r\n        //switching animatopn with incrementing delay\r\n        setTimeout(() => {\r\n\r\n          //get desired index \r\n          const [barIdx, newBarHeight] = animations[animationIndex];\r\n\r\n          //get style from array DOM\r\n          const barOneStyle = arrayBars[barIdx].style;\r\n\r\n          //set new height\r\n          barOneStyle.height = `${newBarHeight}px`;\r\n\r\n        }, animationIndex * this.state.ANIMATION_SPEED_MS);\r\n\r\n\r\n\r\n      }\r\n\r\n    }\r\n\r\n    this.sortingCompletedAnimation(animationIndexCounter * this.state.ANIMATION_SPEED_MS)\r\n\r\n  }\r\n\r\n  sortingCompletedAnimation(delayedAnimationSpeed) {\r\n    const animations = getCompletedAnimations(this.state.array)\r\n\r\n    let animationIndex = 0;\r\n\r\n    //traverse through animations and display on the screen\r\n    animations.forEach(animation => {\r\n      setTimeout(() => {\r\n        //get arrays from DOM\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        //if animation index % 3 != 2, which means its a colour change animation\r\n        const isColored = animationIndex % 2 === 0;\r\n\r\n        //get the index for desired bar\r\n        const [barOneIdx] = animation;\r\n\r\n        //get styles for said bar\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n\r\n        console.log(animationIndex + \" \" + delayedAnimationSpeed)\r\n\r\n\r\n\r\n        //set colour of bars with an incrementing delay\r\n        setTimeout(() => {\r\n          if (isColored) {\r\n            barOneStyle.backgroundColor = DONE_COLOR\r\n          } else {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR\r\n          }\r\n        }, (animationIndex * this.state.ANIMATION_SPEED_MS));\r\n\r\n        //a variable that needs to increment for each settimeout so it can appear with delay every single animation\r\n        animationIndex++\r\n      }, delayedAnimationSpeed);\r\n    });\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n\r\n    return (\r\n      <div className=\"\">\r\n\r\n        <div className=\"d-flex justify-content-center array-container align-items-baseline\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n\r\n        <Container fluid className=\"controls-container\">\r\n\r\n          <Row className=\"justify-content-center\">\r\n\r\n            <Col lg={2} md=\"auto\" sm={12}>\r\n              <div className=\"d-flex align-items-center\">\r\n                <div>Animation speed(ms): </div>\r\n\r\n                <NumericInput style={{\r\n                  input: {\r\n                    width: '50%'\r\n                  }\r\n                }}\r\n                  min={1}\r\n                  max={300}\r\n                  value={this.state.ANIMATION_SPEED_MS}\r\n                  step={10} onChange={(x) => {\r\n                    this.setState({\r\n                      ANIMATION_SPEED_MS: x\r\n                    })\r\n\r\n                  }\r\n                  } />\r\n\r\n\r\n              </div>\r\n            </Col>\r\n\r\n            <Col lg={2} md=\"auto\" sm={12}>\r\n              <div className=\"d-flex align-items-center\">\r\n                <div>Array size : </div>\r\n                <Slider\r\n                  axis=\"x\"\r\n                  xstep={10}\r\n                  xmin={10}\r\n                  xmax={300}\r\n                  x={this.state.NUMBER_OF_ARRAY_BARS}\r\n                  onChange={({ x }) => {\r\n                    this.setState({\r\n                      sliderCoords: {\r\n                        x\r\n                      },\r\n                      NUMBER_OF_ARRAY_BARS: x\r\n                    })\r\n\r\n                    this.resetArray()\r\n                  }\r\n                  }\r\n                />\r\n\r\n              </div>\r\n            </Col>\r\n\r\n            <Col lg=\"auto\" md=\"auto\" sm={12}>\r\n              <div className=\"d-flex justify-content-center\">\r\n\r\n                <Button className=\"control-button btn-secondary\" onClick={() => this.resetArray()}>Generate New Array</Button>\r\n              </div>\r\n\r\n            </Col>\r\n\r\n\r\n            <Col lg={2} md=\"auto\" sm={12}>\r\n              <Dropdown>\r\n                <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                  Sorting Algorithms\r\n              </Dropdown.Toggle>\r\n\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={() => {\r\n                    this.mergeSort()\r\n\r\n                  }}>Merge Sort</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => this.selectionSort()}>Selection Sort</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => this.bubbleSort()}>Bubble Sort</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => this.reverseBubbleSort()}>Reserve Bubble Sort</Dropdown.Item>\r\n                  <Dropdown.Item onClick={() => this.traversal()}>BECOME SQUARE</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Col>\r\n\r\n\r\n\r\n          </Row>\r\n\r\n\r\n        </Container>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}